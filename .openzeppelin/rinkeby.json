{
  "manifestVersion": "3.1",
  "impls": {
    "dbd7bd5fb44641a9a7a489e946d3180574779b3dc63a57f3c5bd429553af4ab9": {
      "address": "0x2cf76F595Ff00Ee810Cddf2409908770c44bc3Fb",
      "txHash": "0x8f060272513f808bd848fa9b386c339874302cce0282c1b77c97ef5c50727680",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_owner",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:20"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_candidate",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:21"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:95"
          },
          {
            "contract": "DecimalERC20",
            "label": "decimalMap",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "src/utils/DecimalERC20.sol:12"
          },
          {
            "contract": "DecimalERC20",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/DecimalERC20.sol:23"
          },
          {
            "contract": "BaseBridge",
            "label": "ambBridge",
            "type": "t_contract(IAMB)15782",
            "src": "src/bridge/BaseBridge.sol:27"
          },
          {
            "contract": "BaseBridge",
            "label": "multiTokenMediator",
            "type": "t_contract(IMultiTokenMediator)15794",
            "src": "src/bridge/BaseBridge.sol:30"
          },
          {
            "contract": "BaseBridge",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/bridge/BaseBridge.sol:44"
          },
          {
            "contract": "RootBridge",
            "label": "priceFeed",
            "type": "t_contract(IPriceFeed)18153",
            "src": "src/bridge/ethereum/RootBridge.sol:17"
          },
          {
            "contract": "RootBridge",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/bridge/ethereum/RootBridge.sol:31"
          }
        ],
        "types": {
          "t_contract(IPriceFeed)18153": {
            "label": "contract IPriceFeed"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(IAMB)15782": {
            "label": "contract IAMB"
          },
          "t_contract(IMultiTokenMediator)15794": {
            "label": "contract IMultiTokenMediator"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "f2f138f13395b2cb5d31f3b5d716be05acd3ff35f6fd1ace35796f0f32d969c3": {
      "address": "0x4830323E962729d2C8EfDe66EB73434038437314",
      "txHash": "0x0e8d3a6ffb21d97bf76930b97bfc8c8337c0038d147a2d99bd6c3f604c6963a3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_owner",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:20"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_candidate",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:21"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:95"
          },
          {
            "contract": "BlockContext",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/BlockContext.sol:13"
          },
          {
            "contract": "ChainlinkL1",
            "label": "priceFeedMap",
            "type": "t_mapping(t_bytes32,t_contract(AggregatorV3Interface)45)",
            "src": "src/ChainlinkL1.sol:27"
          },
          {
            "contract": "ChainlinkL1",
            "label": "priceFeedKeys",
            "type": "t_array(t_bytes32)dyn_storage",
            "src": "src/ChainlinkL1.sol:28"
          },
          {
            "contract": "ChainlinkL1",
            "label": "rootBridge",
            "type": "t_contract(RootBridge)15705",
            "src": "src/ChainlinkL1.sol:29"
          },
          {
            "contract": "ChainlinkL1",
            "label": "priceFeedL2Address",
            "type": "t_address",
            "src": "src/ChainlinkL1.sol:30"
          },
          {
            "contract": "ChainlinkL1",
            "label": "prevTimestampMap",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "src/ChainlinkL1.sol:31"
          },
          {
            "contract": "ChainlinkL1",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/ChainlinkL1.sol:45"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_contract(AggregatorV3Interface)45)": {
            "label": "mapping(bytes32 => contract AggregatorV3Interface)"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_contract(RootBridge)15705": {
            "label": "contract RootBridge"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "9912605244925ac7f868e922f9a7bbf1d48867f29ae4bcc4c1a1a9a55a9fcbfc": {
      "address": "0x915541Da148D310Cb4D4488E3f2a4f29696c7D83",
      "txHash": "0x0b23e68e8b86ce7314fd8c867db212a51b508a022d7c492ec833b48c03a32ead",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_owner",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:20"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_candidate",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:21"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:95"
          },
          {
            "contract": "MerkleRedeemUpgradeSafe",
            "label": "weekMerkleRoots",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "src/staking/Balancer/MerkleRedeemUpgradeSafe.sol:22"
          },
          {
            "contract": "MerkleRedeemUpgradeSafe",
            "label": "claimed",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
            "src": "src/staking/Balancer/MerkleRedeemUpgradeSafe.sol:23"
          },
          {
            "contract": "MerkleRedeemUpgradeSafe",
            "label": "token",
            "type": "t_contract(IERC20)2022",
            "src": "src/staking/Balancer/MerkleRedeemUpgradeSafe.sol:25"
          },
          {
            "contract": "MerkleRedeemUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/staking/Balancer/MerkleRedeemUpgradeSafe.sol:40"
          },
          {
            "contract": "BlockContext",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/BlockContext.sol:13"
          },
          {
            "contract": "PerpRewardVesting",
            "label": "merkleRootTimestampMap",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "src/staking/PerpRewardVesting.sol:20"
          },
          {
            "contract": "PerpRewardVesting",
            "label": "merkleRootIndexes",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "src/staking/PerpRewardVesting.sol:23"
          },
          {
            "contract": "PerpRewardVesting",
            "label": "vestingPeriod",
            "type": "t_uint256",
            "src": "src/staking/PerpRewardVesting.sol:25"
          },
          {
            "contract": "PerpRewardVesting",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/staking/PerpRewardVesting.sol:37"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
            "label": "mapping(uint256 => mapping(address => bool))"
          },
          "t_contract(IERC20)2022": {
            "label": "contract IERC20"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "966d41e8f63226c85645c8adbd6c66e95956bde935d2451d4b02b92a3db10049": {
      "address": "0x8BA4672c0Fe1a37D595639A8985a5CB1AEbDFA1B",
      "txHash": "0x481a783e5f2262b63eba4b9eb1bb882bb3bbddca5c291e6d4808778451edecac",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_owner",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:20"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_candidate",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:21"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:95"
          },
          {
            "contract": "DecimalERC20",
            "label": "decimalMap",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "src/utils/DecimalERC20.sol:12"
          },
          {
            "contract": "DecimalERC20",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/DecimalERC20.sol:23"
          },
          {
            "contract": "FeeTokenPoolDispatcherL1",
            "label": "feeRewardPoolMap",
            "type": "t_mapping(t_contract(IERC20)2022,t_contract(IRewardRecipient)18675)",
            "src": "src/staking/FeeTokenPoolDispatcherL1.sol:27"
          },
          {
            "contract": "FeeTokenPoolDispatcherL1",
            "label": "feeTokens",
            "type": "t_array(t_address)dyn_storage",
            "src": "src/staking/FeeTokenPoolDispatcherL1.sol:28"
          },
          {
            "contract": "FeeTokenPoolDispatcherL1",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/staking/FeeTokenPoolDispatcherL1.sol:43"
          }
        ],
        "types": {
          "t_mapping(t_contract(IERC20)2022,t_contract(IRewardRecipient)18675)": {
            "label": "mapping(contract IERC20 => contract IRewardRecipient)"
          },
          "t_contract(IERC20)2022": {
            "label": "contract IERC20"
          },
          "t_contract(IRewardRecipient)18675": {
            "label": "contract IRewardRecipient"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "33c73d38821ee1faacfcb5b5824026dfa096f2293abfba3fdb815b24748c0a26": {
      "address": "0xe49Acca15CD65de094Da8D9E3861bAb622005BcB",
      "txHash": "0xfae7289e0e049eafce5161cd0b65a8f51586d3eda7ef8ebfd1f0e77ef704e233",
      "layout": {
        "storage": [
          {
            "contract": "DecimalERC20",
            "label": "decimalMap",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "src/utils/DecimalERC20.sol:12"
          },
          {
            "contract": "DecimalERC20",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/DecimalERC20.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_owner",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:20"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_candidate",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:21"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:95"
          },
          {
            "contract": "BlockContext",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/BlockContext.sol:13"
          },
          {
            "contract": "StakedPerpToken",
            "label": "name",
            "type": "t_string_storage",
            "src": "src/staking/StakedPerpToken.sol:40"
          },
          {
            "contract": "StakedPerpToken",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "src/staking/StakedPerpToken.sol:41"
          },
          {
            "contract": "StakedPerpToken",
            "label": "decimals",
            "type": "t_uint8",
            "src": "src/staking/StakedPerpToken.sol:42"
          },
          {
            "contract": "StakedPerpToken",
            "label": "totalSupplyHistory",
            "type": "t_struct(History)30806_storage",
            "src": "src/staking/StakedPerpToken.sol:46"
          },
          {
            "contract": "StakedPerpToken",
            "label": "balancesHistory",
            "type": "t_mapping(t_address,t_struct(History)30806_storage)",
            "src": "src/staking/StakedPerpToken.sol:49"
          },
          {
            "contract": "StakedPerpToken",
            "label": "stakerCooldown",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "src/staking/StakedPerpToken.sol:52"
          },
          {
            "contract": "StakedPerpToken",
            "label": "stakerWithdrawPendingBalance",
            "type": "t_mapping(t_address,t_struct(decimal)31373_storage)",
            "src": "src/staking/StakedPerpToken.sol:55"
          },
          {
            "contract": "StakedPerpToken",
            "label": "stakeModules",
            "type": "t_array(t_address)dyn_storage",
            "src": "src/staking/StakedPerpToken.sol:57"
          },
          {
            "contract": "StakedPerpToken",
            "label": "perpToken",
            "type": "t_contract(IERC20)2022",
            "src": "src/staking/StakedPerpToken.sol:58"
          },
          {
            "contract": "StakedPerpToken",
            "label": "cooldownPeriod",
            "type": "t_uint256",
            "src": "src/staking/StakedPerpToken.sol:59"
          },
          {
            "contract": "StakedPerpToken",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/staking/StakedPerpToken.sol:73"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_struct(History)30806_storage": {
            "label": "struct Checkpointing.History",
            "members": [
              {
                "label": "history",
                "type": "t_array(t_struct(Checkpoint)30802_storage)dyn_storage"
              }
            ]
          },
          "t_array(t_struct(Checkpoint)30802_storage)dyn_storage": {
            "label": "struct Checkpointing.Checkpoint[]"
          },
          "t_struct(Checkpoint)30802_storage": {
            "label": "struct Checkpointing.Checkpoint",
            "members": [
              {
                "label": "time",
                "type": "t_uint64"
              },
              {
                "label": "value",
                "type": "t_uint192"
              }
            ]
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_mapping(t_address,t_struct(History)30806_storage)": {
            "label": "mapping(address => struct Checkpointing.History)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(decimal)31373_storage)": {
            "label": "mapping(address => struct Decimal.decimal)"
          },
          "t_struct(decimal)31373_storage": {
            "label": "struct Decimal.decimal",
            "members": [
              {
                "label": "d",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(IERC20)2022": {
            "label": "contract IERC20"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "1af2111dc40444058452ca9cf9b12ceb4a079b22882d060c5cbfa818397f75bc": {
      "address": "0x8a0707772DBa21Cd324692d8c5Dd5F9bFDbb16EE",
      "txHash": "0x98e911f2076f11e07e2109e6c00eb76cfc6c1f2bd1630cc027d645f335aba28c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_owner",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:20"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_candidate",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:21"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:95"
          },
          {
            "contract": "BlockContext",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/BlockContext.sol:13"
          },
          {
            "contract": "DecimalERC20",
            "label": "decimalMap",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "src/utils/DecimalERC20.sol:12"
          },
          {
            "contract": "DecimalERC20",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/DecimalERC20.sol:23"
          },
          {
            "contract": "FeeRewardPoolL1",
            "label": "userRewardPerTokenPaid",
            "type": "t_mapping(t_address,t_struct(decimal)31373_storage)",
            "src": "src/staking/FeeRewardPoolL1.sol:47"
          },
          {
            "contract": "FeeRewardPoolL1",
            "label": "rewards",
            "type": "t_mapping(t_address,t_struct(decimal)31373_storage)",
            "src": "src/staking/FeeRewardPoolL1.sol:49"
          },
          {
            "contract": "FeeRewardPoolL1",
            "label": "rewardPerTokenStored",
            "type": "t_struct(decimal)31373_storage",
            "src": "src/staking/FeeRewardPoolL1.sol:52"
          },
          {
            "contract": "FeeRewardPoolL1",
            "label": "rewardRate",
            "type": "t_struct(decimal)31373_storage",
            "src": "src/staking/FeeRewardPoolL1.sol:54"
          },
          {
            "contract": "FeeRewardPoolL1",
            "label": "lastUpdateTime",
            "type": "t_uint256",
            "src": "src/staking/FeeRewardPoolL1.sol:57"
          },
          {
            "contract": "FeeRewardPoolL1",
            "label": "periodFinish",
            "type": "t_uint256",
            "src": "src/staking/FeeRewardPoolL1.sol:58"
          },
          {
            "contract": "FeeRewardPoolL1",
            "label": "feeTokenPoolDispatcher",
            "type": "t_address",
            "src": "src/staking/FeeRewardPoolL1.sol:60"
          },
          {
            "contract": "FeeRewardPoolL1",
            "label": "stakedPerpToken",
            "type": "t_contract(StakedPerpToken)30791",
            "src": "src/staking/FeeRewardPoolL1.sol:61"
          },
          {
            "contract": "FeeRewardPoolL1",
            "label": "token",
            "type": "t_contract(IERC20)2022",
            "src": "src/staking/FeeRewardPoolL1.sol:62"
          },
          {
            "contract": "FeeRewardPoolL1",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/staking/FeeRewardPoolL1.sol:78"
          }
        ],
        "types": {
          "t_mapping(t_address,t_struct(decimal)31373_storage)": {
            "label": "mapping(address => struct Decimal.decimal)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(decimal)31373_storage": {
            "label": "struct Decimal.decimal",
            "members": [
              {
                "label": "d",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(StakedPerpToken)30791": {
            "label": "contract StakedPerpToken"
          },
          "t_contract(IERC20)2022": {
            "label": "contract IERC20"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    }
  },
  "admin": {
    "address": "0x0C55fE453eC5166FA56e495Dc02953cB0E29A67a",
    "txHash": "0x14b711ba235d256850a5b3b39beb45aaaa5c01d5269bf6701505b597e0329458"
  }
}
